package edu.snu.csne.ds;

public class ToeBoard
{
	private String[] b;
	// int tracking number of empty spots
	private int numberOfOpens;
	
	// default constructor
	public ToeBoard()
	{
		// create arrayBoard
		String[] _board = new String[9];
		// assign board to the array for use
		b = _board;
		numberOfOpens = 9;
	}
	
	
	/*
	 * below are small utility methods to help with board assessments
	 */
	private void addX( int index )
	{
		b[ index ] = "X";
		numberOfOpens--;
	}
	
	private void addO( int index )
	{
		b[ index ] = "O";
		numberOfOpens--;
	}
	
	private int getNumX( String[] board )
	{
		int num = 0;
		for ( int i = 0 ; i < 9 ; i ++ )
		{
			if ( board[i] == "X" )
			{
				num++;
			}
		}
		return num;
	}
	
	private int getNumO( String[] board )
	{
		int num = 0;
		for ( int i = 0 ; i < 9 ; i ++ )
		{
			if ( board[i] == "0" )
			{
				num++;
			}
		}
		return num;
	}
	
	private int getNumEmpty( String[] board )
	{
		int num = 0;
		for ( int i = 0 ; i < 9 ; i ++ )
		{
			if ( board[i] == null )
			{
				num++;
			}
		}
		return num;
	}
	
	
	
	/*
	 * this method determines if there is a winning "three in a row" on board
	 * 
	 * @return boolean
	 */
	private boolean isThreeInARow( String[] board )
	{
		// check rows for TIAR
		if ( (board[0].equals(board[1]) && board[1].equals(board[2]) ) && 
				(board[1] != null) )
		{
			return true;
		}
		else if ( (board[3].equals(board[4]) && board[4].equals(board[5]) ) && 
				(board[4] != null) )
		{
			return true;
		}
		if ( (board[6].equals(board[7]) && board[7].equals(board[8]) ) && 
				(board[7] != null) )
		{
			return true;
		}
		
		// check columns for TIAR
		if ( (board[0].equals(board[3]) && board[3].equals(board[6]) ) && 
				(board[0] != null) )
		{
			return true;
		}
		else if ( (board[1].equals(board[4]) && board[4].equals(board[7]) ) && 
				(board[4] != null) )
		{
			return true;
		}
		if ( (board[2].equals(board[5]) && board[5].equals(board[8]) ) && 
				(board[5] != null) )
		{
			return true;
		}
		
		// check diagonals for TIAR
		if ( (board[0].equals(board[4]) && board[4].equals(board[8]) ) && 
				(board[4] != null) )
		{
			return true;
		}
		if ( (board[2].equals(board[4]) && board[4].equals(board[6]) ) && 
				(board[4] != null) )
		{
			return true;
		}
		return false;
	}
	
	/*
	 * determines if the game is over
	 * 
	 * @return boolean
	 */
	private boolean isGameOver( String[] board )
	{
		// all spaces full, or there's 3 in a row
		if ( numberOfOpens == 0 )
		{
			// game is over
			return true;
		}
		return isThreeInARow( board );
	}
	
	/*
	 * determines if it's player X's turn to act at a given state. this is necessary
	 * because this is what allows us to know whether an X or O should be placed next
	 * 
	 * @return 
	 */
	private boolean isXNextToAct( String[] board )
	{
		// if board is empty (start of game)
		if ( getNumEmpty( board ) == 9 )
		{
			return true;
		}
		// or even number of moves taken,
		else if ( ( getNumEmpty( board ) % 2 ) == 1 )
		{
			// X is NTA
			return true;
		}
		return false;
	}
	
	/*
	 * finds index of next occurring null entry
	 */
	private int getNullIndex( String[] board )
	{
		for ( int i = 0 ; i < 0 ; i ++ )
		{
			if ( board[i] == null )
			{
				return i;
			}
		}
		return -1;
	}
	
	/*
	 * Start with a board state. Now, consider all of the next
	 * potential moves by a player.
	 * What we're attempting to do is find all final substates of each
	 * board. Then, find the EV of each move by finding the average number of
	 * points won by each player (+5pts if win, -5 if lose).
	 * 
	 * We need to find a method to input a board and find all substates
	 * of that board. Once we do that, we can find the EV of each move
	 */
	
	/*
	 * determines if a board is a substate board of another
	 * 
	 * @return boolean
	 */
	private boolean isSubstate( String[] earlyBoard, String[] potentialSubBoard )
	{
		/*
		 * if we find a spot in the early board that is not null
		 * and the corresponding spot in the new board is not the same
		 * value, is not substate
		 */
		for ( int n = 0 ; n < 9 ; n ++ )
		{
			// if we've found a spot to check
			if ( earlyBoard[n] != null )
			{
				// and spots don't match
				if ( earlyBoard[n] != potentialSubBoard[n] )
				{
					// can't be subBoard
					return false;
				}
			}
		}
		return true;
	}
	
	
	/*
	 * this method generates all the boards that are "one step" ahead
	 * of any given board. using this method ensures that all subboards
	 * associated with a given board is a subboard.
	 * 
	 * to reiterate, a subboard is a board that is at a node in the game
	 * tree in the same branch as the input board
	 */
	private void generateOneStepSubboards( String[] inputBoard )
	{
		/*
		 * go through all spaces until empty is found, 
		 * then put X if appropriate, O otherwise
		 */
		int index = 0;
		// find index of first null space
		while( inputBoard[index] != null )
		{
			index++;
		}
		// make sure game is not over
		if (!isGameOver(inputBoard))
		{
			if (isXNextToAct(inputBoard))
			{
				inputBoard[index] = "X";
			}
			else
			{
				inputBoard[index] = "O";
			}
		}
	}
	
	/*
	 * resets board to previous gameState
	 */
	private void resetGameState( String[] previousBoard )
	{
		
	}
	
	
	
}
